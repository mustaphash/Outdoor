// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(OutdoorContext))]
    [Migration("20220422175131_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnimalLake", b =>
                {
                    b.Property<int>("AnimalsId")
                        .HasColumnType("int");

                    b.Property<int>("LakesId")
                        .HasColumnType("int");

                    b.HasKey("AnimalsId", "LakesId");

                    b.HasIndex("LakesId");

                    b.ToTable("AnimalLake");
                });

            modelBuilder.Entity("AnimalNatureReserve", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int>("NatureReservesId")
                        .HasColumnType("int");

                    b.HasKey("AnimalId", "NatureReservesId");

                    b.HasIndex("NatureReservesId");

                    b.ToTable("AnimalNatureReserve");
                });

            modelBuilder.Entity("Core.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<int?>("ParkId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.ToTable("Animal", (string)null);
                });

            modelBuilder.Entity("Core.Entities.LandmarkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("Height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("LandmarkTypes");
                });

            modelBuilder.Entity("Core.Entities.Outdoor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CarPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("CarPath");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int")
                        .HasColumnName("WorkingHours");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Outdoor", (string)null);
                });

            modelBuilder.Entity("LandmarkLandmarkType", b =>
                {
                    b.Property<int>("LandmarksId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("LandmarksId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("LandmarkLandmarkType");
                });

            modelBuilder.Entity("Core.Entities.Fountain", b =>
                {
                    b.HasBaseType("Core.Entities.Outdoor");

                    b.Property<string>("InMemoryOf")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("InMemoryOf");

                    b.Property<string>("WaterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("WaterType");

                    b.ToTable("Fountain", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Lake", b =>
                {
                    b.HasBaseType("Core.Entities.Outdoor");

                    b.Property<bool>("Camping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Camping");

                    b.Property<bool>("FishingAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("FishingAllowed");

                    b.ToTable("Lake", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Landmark", b =>
                {
                    b.HasBaseType("Core.Entities.Outdoor");

                    b.ToTable("Landmark", (string)null);
                });

            modelBuilder.Entity("Core.Entities.NatureReserve", b =>
                {
                    b.HasBaseType("Core.Entities.Outdoor");

                    b.Property<bool>("OpenForTourist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("OpenForTourist");

                    b.Property<double>("Size")
                        .HasColumnType("float")
                        .HasColumnName("Size");

                    b.ToTable("NatureReserve", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Park", b =>
                {
                    b.HasBaseType("Core.Entities.Outdoor");

                    b.Property<bool>("Camping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Camping");

                    b.Property<string>("Safety")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Safety");

                    b.Property<string>("WalkingPaths")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("WalkingPaths");

                    b.ToTable("Park", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Villa", b =>
                {
                    b.HasBaseType("Core.Entities.Outdoor");

                    b.Property<bool>("Electricity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Electricity");

                    b.Property<int>("ParkingCount")
                        .HasColumnType("int")
                        .HasColumnName("ParkingCount");

                    b.Property<int>("RoomCount")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("RoomCount");

                    b.Property<bool>("WiFi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Wi-Fi");

                    b.ToTable("Villa", (string)null);
                });

            modelBuilder.Entity("AnimalLake", b =>
                {
                    b.HasOne("Core.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Lake", null)
                        .WithMany()
                        .HasForeignKey("LakesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimalNatureReserve", b =>
                {
                    b.HasOne("Core.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.NatureReserve", null)
                        .WithMany()
                        .HasForeignKey("NatureReservesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Animal", b =>
                {
                    b.HasOne("Core.Entities.Park", null)
                        .WithMany("Animals")
                        .HasForeignKey("ParkId");
                });

            modelBuilder.Entity("LandmarkLandmarkType", b =>
                {
                    b.HasOne("Core.Entities.Landmark", null)
                        .WithMany()
                        .HasForeignKey("LandmarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.LandmarkType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Fountain", b =>
                {
                    b.HasOne("Core.Entities.Outdoor", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Fountain", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Lake", b =>
                {
                    b.HasOne("Core.Entities.Outdoor", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Lake", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Landmark", b =>
                {
                    b.HasOne("Core.Entities.Outdoor", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Landmark", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.NatureReserve", b =>
                {
                    b.HasOne("Core.Entities.Outdoor", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.NatureReserve", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Park", b =>
                {
                    b.HasOne("Core.Entities.Outdoor", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Park", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Villa", b =>
                {
                    b.HasOne("Core.Entities.Outdoor", null)
                        .WithOne()
                        .HasForeignKey("Core.Entities.Villa", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Park", b =>
                {
                    b.Navigation("Animals");
                });
#pragma warning restore 612, 618
        }
    }
}
